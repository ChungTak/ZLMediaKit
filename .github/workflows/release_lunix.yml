name: Release Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # 必须添加此权限才能创建 Release

    steps:
      # 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: master
          submodules: recursive

      # 获取最后一次提交日期
      - name: Set Last Commit Date
        run: |
          LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=short)
          echo "LAST_COMMIT_DATE=$(date -d "$LAST_COMMIT_DATE" +%Y_%m_%d)" >> $GITHUB_ENV

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21e
          local-cache: true
          add-to-path: true
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      # 安装构建工具链
      - name: Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            cmake \
            make \
            gcc-riscv64-linux-gnu \
            libc6-dev-riscv64-cross

      # 安装 Zig
      - name: Setup Zig
        uses: korandoru/setup-zig@v1
        with:
          zig-version: 0.14.0

      # 构建和打包所有目标
      - name: Build and Package All Targets
        run: |
          targets=("aarch64-linux-android")
          chmod +x ./zig-build/*.sh

          for target in "${targets[@]}"; do
            echo "==============================="
            echo "Building target: $target"
            echo "==============================="
            ./zig-build/build_zlm.sh --target=$target

            if [[ "$target" == *"android"* || "$target" == "riscv64-linux-gnu" ]]; then
              output_dir="release/android/ReleaseSmall"
            else
              output_dir="release/linux/ReleaseSmall"
            fi

            if [ -d "$output_dir" ]; then
              artifact_name="ZLMediaKit_${target}_${LAST_COMMIT_DATE}"
              mkdir -p release/artifacts
              mv "$output_dir" "release/artifacts/$artifact_name"
              tar -czvf "release/artifacts/${artifact_name}.tar.gz" -C "release/artifacts" "$artifact_name"
            else
              echo "::error::Output directory $output_dir not found for $target!"
              exit 1
            fi
          done

      # 上传工作流产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release/artifacts/*.tar.gz
          retention-days: 7

      # 创建 Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ env.LAST_COMMIT_DATE }}
          release_name: Release ${{ env.LAST_COMMIT_DATE }}
          body: |
            Multi-arch Build for ${{ env.LAST_COMMIT_DATE }}
            Targets:
            - x86_64-linux-gnu
            - aarch64-linux-gnu  
            - aarch64-linux-android
            - riscv64-linux-gnu
          draft: false
          prerelease: false
          overwrite: true

      # 批量上传资产
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url="${{ steps.create_release.outputs.upload_url }}"
          
          # 创建计数器
          count=0
          total=$(ls release/artifacts/*.tar.gz | wc -l)

          for asset in release/artifacts/*.tar.gz; do
            ((count++))
            filename=$(basename "$asset")
            echo "[$count/$total] Uploading $filename"

            # 使用 GitHub API 直接上传
            response=$(curl -sS \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$asset" \
              -w "%{http_code}" \
              "$upload_url?name=$filename")

            # 解析响应状态码
            http_status=${response: -3}
            if [ "$http_status" -eq 201 ]; then
              echo "✅ Upload success"
            else
              echo "❌ Upload failed (HTTP $http_status)"
              echo "Response body: ${response%???}"
              exit 1
            fi
          done
     
      # 清理工作空间
      - name: Cleanup
        if: always()
        run: rm -rf android-ndk* zig-linux-*